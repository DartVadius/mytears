ТЗ
1. Laravel +
2. MySQL +
3. Doctrine 2 +
4. Docker +
5. Redis
6. ElasticSearch
7. Backend - Blade ????? -
8. Frontend - Vue.js (axios, vuex, vuex-persistedstate)
9. Bootstrap 4
10. REST API +
11. Social login
12. Tests
13. RabbitMQ
14. Логирование действий пользователей https://github.com/spatie/laravel-activitylog  https://docs.spatie.be/laravel-activitylog/v3/introduction

1. Устанавливаем composer глобально
sudo apt update

Now, let's install the dependencies. We'll need curl in order to download Composer and php-cli for installing and running it.
The php-mbstring package is necessary to provide functions for a library we'll be using. git is used by Composer for
downloading project dependencies, and unzip for extracting zipped packages. Everything can be installed with the following command:

sudo apt install curl php-cli php-mbstring git unzip

cd ~
curl -sS https://getcomposer.org/installer -o composer-setup.php
Next, verify that the installer matches the SHA-384 hash for the latest installer found on the Composer Public Keys / Signatures page.
Copy the hash from that page and store it as a shell variable:

HASH=544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061
Make sure that you substitute the latest hash for the highlighted value.

Now execute the following PHP script to verify that the installation script is safe to run:

php -r "if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
You'll see the following output.

Output
Installer verified

To install composer globally, use the following command which will download and install Composer as a system-wide command named composer, under /usr/local/bin:

sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

To test your installation, run:

composer

2. Устанавливаем Laravel (5.7 на данный момент)

composer create-project --prefer-dist laravel/laravel blog
composer install

проверка
$ php -S localhost:8080 -t public
или
$ php artisan serve
http://localhost:8080/ или http://localhost:8000/ если artisan

для продакшена
composer install --no-dev

2.1 Настраиваем PHPStorm
помечаем папки как source/excluded/resources etc
устанавливаем плагин LaravelPlugin - теперь работают редиректы по ctrl+lmk : например из роутера можно перейти сразу на контроллер или представление

3. Устанавливаем Docker

4. Конфигурация докера
старый конфиг mysql
mysql:
    image: mysql:5.7
    volumes:
    - ./storage/docker/mysql:/var/lib/mysql
    environment:
    - "MYSQL_ROOT_PASSWORD=mytears_secret_root_pass"
    - "MYSQL_USER=mytears_user"
    - "MYSQL_PASSWORD=mytears_secret_pass"
    - "MYSQL_DATABASE=mytears"
    ports:
    - "33061:3306"
конфиг после апгрейда до mysql:8.0
mysql:
    image: mysql:8.0.14
    volumes:
    - ./storage/docker/mysql:/var/lib/mysql
    environment:
    - "MYSQL_ROOT_PASSWORD=mytears_secret_root_pass"
    - "MYSQL_DATABASE=mytears"
    - "MYSQL_USER=root"
    - "MYSQL_PASSWORD=mytears_secret_root_pass"
    ports:
    - "33061:3306"
    command: "--default-authentication-plugin=mysql_native_password"

5 .env - настраиваем для работы через докер
Прописываем порты, которые указаны в docker-compose.yml
Настраиваем кеширование:
CACHE_DRIVER=redis
SESSION_DRIVER=redis

6 Дополнительное по

composer require barryvdh/laravel-ide-helper
composer require barryvdh/laravel-debugbar --dev
composer require predis/predis

config/app.php, in providers array (не обязательно):
Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,
Barryvdh\Debugbar\ServiceProvider::class,

Автогенерация PHPDoc для фасадов: php artisan ide-helper:generate
теперь PHPStorm нормально видит фасады и работает автоподстановка

You can configure your composer.json чтобы генерировать доки после каждого изменения в папке vendor:

"scripts":{
    "post-update-cmd": [
        "Illuminate\\Foundation\\ComposerScripts::postUpdate",
        "php artisan ide-helper:generate",
        "php artisan ide-helper:meta"
    ]
},

если нужно настройить плагин barryvdh/laravel-ide-helper:
или вручную копируем /vendor/barryvdh/laravel-ide-helper/config/ide-helper.php в /config
или выполняем команду php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config
(так можно публиковать любые конфиги из вендора для настройки плагинов)
и в /config/ide-helper.php настраиваем плагин

7 Make-file

8 Стартуем Laravel

https://localhost:8080/

// 9 Аутентификация
// php artisan  make:auth - создаем роуты и представления для регистрации/логина
// php artisan migrate - создаем БД

10 Подключаем доктрину
composer require laravel-doctrine/orm
After updating composer, add the ServiceProvider to the providers array in config/app.php
LaravelDoctrine\ORM\DoctrineServiceProvider::class,

Register the EntityManager, Registry and Doctrine facade in 'aliases' array:
'EntityManager' => LaravelDoctrine\ORM\Facades\EntityManager::class,
'Registry'      => LaravelDoctrine\ORM\Facades\Registry::class,
'Doctrine'      => LaravelDoctrine\ORM\Facades\Doctrine::class,

Публикуем конфиг
php artisan vendor:publish --tag="config"

By default, Laravel's application skeleton has its Model classes in the app/ folder.
With Doctrine, you'll need to create a dedicated folder for your Entities and point your  config/doctrine.php paths array to it.
If you don't, Doctrine will scan your whole app/ folder for files, which will have a huge impact on performance!

'paths' => [
    base_path('app/Entities'),
],

11. Doctrine migrations
composer require "laravel-doctrine/migrations"

After updating composer, add the ServiceProvider to the providers array in config/app.php
LaravelDoctrine\Migrations\MigrationsServiceProvider::class,

Устанавливаем дополнения
composer require "laravel-doctrine/extensions:1.0.*"
composer require "gedmo/doctrine-extensions=^2.4"

If you are using an annotation driver, then add the Gedmo (Behavioral) extensions service provider in config/app.php:
LaravelDoctrine\Extensions\GedmoExtensionsServiceProvider::class,

12. Аутентификация
https://isaacearl.com/blog/laravel-doctrine-setup

в класс user добавить аннотацию
/**
 * @ORM\Entity
 * @ORM\Table(name="users")
 */
иначе не получиться сгенерировать миграцию

в конце сделать php artisan ide-helper:generate чтобы подсвечивались методы из User во вьюхах

13. Git

14. делаем заговтовку админки
создаем новый контроллер контроллер
php artisan make:controller Admin/AdminController
копируем туда код из HomeController
добавляем представление admin.blade.php
добавляем в routes/web.php новый маршрут
Route::get('/admin', 'Admin\AdminController@index')->name('admin');

Добавляем в модель User поля $role и $authToken, $status, $verifyCode, добавляем метод для добавления роли и статуса,
в контроллере регистрации заполняем поле роли и статуса
генерируем и применяем миграции

15. В routes/web.php создаем группу для роутов админки

16. Генерация фикстур
добавляем сидер для таблицы юзеров, который использует доктрину (т.к. наша модель юзеров не наследуется от модели Ларавель,
мы не можем использовать стандартные фабрики Laravel для создания фикстур, поэтому объекты пользователей создаем сразу в сидере)
запускаем сидер php artisan db:seed --class=UsersTableSeeder

17. Создаем базовый репозиторий от которого будут наследоваться все наши репозитории
добавляем трейт для пагинации запросов
имплементируем BaseRepositoryInterface и пишем реализацию, для большего удобства сохранения сущностей

18. Создаем репозиторий для модели User
добавляем в аннотации модели юзер связь с класом репозиторием @ORM\Entity(repositoryClass="App\Repositories\User\UserRepository")
генерируем класс репозитория php artisan doctrine:generate:repositories

!!! Есть проблема с путями при генерации  - из созданной папки нужно перетащить получившийся класс в папку Repositories/User
лучше создавать репозитории руками??

создаем интерфейс для репозитория пользователя
имплементируем его в репозиторий
регистрируем репозиторий в сервиспровайдере

19. Добавление админа с помощью консольной команды
создаем новую консольную комманду
php artisan make:command User/CreateAdminCommand
код в app/Console/Commands/User/CreateAdminCommand.php

пример запуска команды: php artisan make:admin vad261275@1gmail.com pass

20. Создаем павила авторизации для админа
в AuthServiceProvider регистрируем новый гейт, который будет фильтровать юзеров по роли админа

зарегистрированное правило можно применять через конструктор контроллера или в навесить на группу админ роутов в
routes/web.php


21. АПИ регистрация
Создаем в Controllers папку Api, в которой будут находиться все наши апи контроллеры
В ней создаем папку Auth и копируем туда RegisterController, редактируем его чтобы он возвращал json
Регистрируем роут в routes/api.php: Route::post('/register', 'Api\Auth\RegisterController@register');

Протестировать можно с помощью Postman, в случае успеха получим ответ
{
    "success": "New user was registered"
}
или если данные были невалидны что-то вроде
{
    "message": "The given data was invalid.",
    "errors": {
        "name": [
            "The name field is required."
        ],
        "email": [
            "The email field is required."
        ],
        "password": [
            "The password field is required."
        ]
    }
}

22. Подключаем Laravel passport и настраиваем его для использования с Doctrine
https://isaacearl.com/blog/laravel-doctrine-setup

php artisan passport:install

22.1 В app/Exceptions/Handler.php обрабатываем 403 ошибку (неавторизовано), чтобы в консоль не валился трейс

23. Тестируем ендпоинты (все в постмане)

24. Пишем сериалайзер для сущности Users который будет преобразовывать объект в json
если не использовать доктрину, в элоквете ларавеля, в базовой модели, от которой наследуются все остальные методы уже есть
такие методы, но мы не используем элоквет

сразу выносим наш сериалайзер в отдельный трейт, чтобы использовать его в будущем и в других наших моделях
app/Services/Traits/Serializer.php

25. Но если на запросы нужно будет возващать разные наборы данных нашей модел, лучше использоать ресурсы ларавел
php artisan  make:resource UserResource
в app/Http/Resources/UserResource.php формируем массив, который будет возвращаться при обращении к данному ресурсу

26. Апгрейд mysql до версии 8.0
в docker-compose.yml меняем образ на image: mysql:8.0.14
добавляем command: "--default-authentication-plugin=mysql_native_password" для решения проблемы аутентификации
если раньше мы уже поднимали контейнер с mysql версии 5.* может появиться следующая ошибка
Mysql Error:The user specified as a definer ('mysql.infoschema'@'localhost') does not exist'
для исправления делаем следующее
docker-compose exec mysql bash
mysql -u root -p root_pass
SET GLOBAL innodb_fast_shutdown = 1;
quit;
mysql_upgrade -u root -p root_pass

в config/database.php добавляем настройки mysql
'version' => 8,
            'modes' => [
                'ONLY_FULL_GROUP_BY',
                'STRICT_TRANS_TABLES',
                'NO_ZERO_IN_DATE',
                'NO_ZERO_DATE',
                'ERROR_FOR_DIVISION_BY_ZERO',
                'NO_ENGINE_SUBSTITUTION',
            ],

27. Рисуем структуру бд в воркбенче
28. Добавляем модели и репозитории согласно разработанной структуре, регистрируем репозитории в сервиспровайдере
добавляем Sluggable расширение для доктрины https://www.laraveldoctrine.org/docs/1.3/extensions/sluggable
при маппинге используем soft delete и sluggable расширения доктрины

29. Роуты, контроллеры, репозитории

Вылетела ошибка getProxyDefinition(): Failed opening required '/tmp/__CG__AppTeam.php

в .env добавил DOCTRINE_PROXY_AUTOGENERATE=true
на продакшене нужно выставить в false!!! и затем php artisan doctrine:generate:proxies

29.1 Категории

Создаем CategoryResource для сериализации ответов
php artisan make:resource CategoryResource

Создаем CategoriesCollection для сериализации массивов объектов
php artisan make:resource Collections/CategoriesCollection

т.к. элоквет при получении набора данных возвращает не массив, а объект Collection,
для совместимости с коллекциями Laravel имплементируем в модель категории EntityInterface (имплементируем этот интерфейс и
в другием модели, которые должны работать с коллекциями)

Создаем app/Services/Category/CategoryService.php чтобы не сасорять контроллер

Создаем валидаторы в Request/Category для создания и редактирования категорий
php artisan make:request Category/UpdateCategory
php artisan make:request Category/CreateCategory

обратить внимание: в UpdateCategory в валидаторе из проверки уникальносьти исключаем наш id

CategoryRepository:
public function getCategory($categoryId, $withChildren)
public function getCategories()

Публичные ресурсы

GET /api/categories/100?children=true
Route::get('/categories/{category_id?}', 'Api\Category\CategoryController@getCategories');

Ресурсы админки

POST /api/categories
Route::post('/categories', 'Category\CategoryController@createCategory');

PUT /api/categories
Route::put('/categories', 'Category\CategoryController@createCategory');

29.2 Посты

Создаем ресурсы, коллекции, реквесты аналогично категориям

Публичные ресурсы

GET /api/posts?category=1&tag=1&page=1&limit=25
Route::get('/posts/{post_id?}', 'Post\PostController@getPost');

Ресурсы админки

POST /api/posts
Route::post('/posts', 'Post\PostController@createPost');

PUT /api/posts
Route::put('/posts', 'Post\PostController@updatePost');


Для пороверки динамических параметров роутов добавляем миддлварю
php artisan make:middleware RouteParamIntegerValidate
регистрируем ее в app/Http/Kernel.php
и используем для роутов в routes/api.php

Также добавляем GetPost в реквесты для валидации гет-параметров в GET запросе



аутентификация - процесс залогинивания, т.е. техническая часть
авторизация - процесс определения ролей и прав доступа

sudo chown -R $USER:www-data storage
sudo chown -R $USER:www-data bootstrap/cache
chmod -R 775 storage
chmod -R 775 bootstrap/cache